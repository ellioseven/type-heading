// Core
//
// @group Mixins / Core
// @author Elliot Mitchum

// _th-core-global-breakpoint
// Allows breakpoint override for sections of code.
//
// @since 0.0.12
// @type Number
// @access private

$_th-core-global-breakpoint: false !default;

// th-with-breakpoint
// Use a breakpoint for a section of code.
//
// @since 0.0.12
// @type mixin
//
// @requires {variable} $_th-core-global-breakpoint
//
// @param {number} $breakpoint (false) A heading list breakpoint (required).
//
// @example scss Output a heading with a 768px breakpoint.
// // @include th-with-breakpoint(768px) {
// //   @include th-heading(h1);
// // }

@mixin th-with-breakpoint(
  $breakpoint
){
  $cache: $_th-core-global-breakpoint;
  $_th-core-global-breakpoint: $breakpoint !global;
  @content;
  $_th-core-global-breakpoint: $cache !global;
}

// th-heading-loop
// Loops through a heading map and outputs @content with breakpoint context.
//
// @since 0.0.14
// @type mixin
// @access private
//
// @requires {function} th-heading-get-map
// @requires {function} _th-heading-has-next
// @requires {function} _th-property-get
// @requires {mixin} th-breakpoint
//
// @param {list | string} $heading A heading map key or list (required).

@mixin _th-heading-loop(
  $heading
){
  $heading-map: th-heading-get-map($heading);
  @if _th-heading-has-next($heading-map) {
    @each $heading-list in $heading-map {
      $breakpoint: _th-property-get($heading-list, breakpoint);
      @if $breakpoint {
        @include th-breakpoint($breakpoint, $breakpoint) {
          @content;
        }
      } @else {
        @content;
      }
    }
  } @else {
    @content;
  }
}

// th-with-var-set
// Sets global variables for heading properties used by various mixins.
//
// @since 0.0.14
// @type mixin
// @access private
//
// @requires {function} th-property-font-size
// @requires {function} th-property-line-height
// @requires {function} th-property-margin-top
// @requires {function} th-property-margin-bottom
// @requires {function} th-property
//
// @param {list} $heading-list - A list of heading property values.
// @param {boolean} $convert (false) - If returned value should be unit converted.
// @param {number} $base-font-size ($th-base-font-size) Font size used for relative calculations.

@mixin _th-with-var-set(
  $heading-list,
  $convert: false,
  $base-font-size: $th-base-font-size
){
  $font-size: th-property-font-size($heading: $heading-list, $convert: false);
  $th-font-size: th-property-font-size($heading: $heading-list, $convert: $convert, $base-font-size: $base-font-size) !global;
  $th-line-height: th-property-line-height($heading: $heading-list, $convert: $convert, $base-font-size: $font-size) !global;
  $th-margin-top: th-property-margin-top($heading: $heading-list, $convert: $convert, $base-font-size: $font-size) !global;
  $th-margin-bottom: th-property-margin-bottom($heading: $heading-list, $convert: $convert, $base-font-size: $font-size) !global;
  $th-breakpoint: th-property($heading: $heading-list, $property-name: breakpoint) !global;
}

// th-with-var-reset
// Resets global variables for heading properties used by various mixins.
//
// @since 0.0.14
// @type mixin
// @access private

@mixin _th-with-var-reset {
  $th-font-size: false !global;
  $th-line-height: false !global;
  $th-margin-top: false !global;
  $th-margin-bottom: false !global;
  $th-breakpoint: false !global;
}

// th-with
// Loop through a headings breakpoints with access to it's property values as a global variable.
// $th-font-size, $th-line-height, $th-margin-top, $th-margin-bottom will become available to you
// within the mixin.
//
// @since 0.0.14
// @type mixin
//
// @requires {mixin} _th-heading-loop
// @requires {mixin} _th-with-var-set
// @requires {mixin} _th-with-var-reset
//
// @param {list | string} $heading A heading map key or list (required).
// @param {boolean} $convert (false) - If returned value should be unit converted.
// @param {number} $base-font-size ($th-base-font-size) Font size used for relative calculations.
//
// @example scss Output font-size, line-height, margin-top and margin-bottom properties individually for a heading.
// // @include th-with(h1) {
// //   margin-top: $th-margin-top;
// //   margin-bottom: $th-margin-bottom;
// //   font-size: $th-font-size;
// //   line-height: $th-line-height;
// // }

@mixin th-with(
  $heading,
  $convert: false,
  $base-font-size: $th-base-font-size
){
  @include _th-heading-loop($heading) {
    @include _th-with-var-set($heading, $convert, $base-font-size);
    @content;
    @include _th-with-var-reset;
  }
}