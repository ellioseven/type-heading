////
/// Core
/// @group Core
////

// _th-core-breakpoint-context
/// Global breakpoint variable for various mixins and functions.
///
/// @since 0.0.12
/// @type Bool | Number
/// @access private

$_th-core-breakpoint-context: false !default;

// _th-core-with
/// Map of heading property values within a th-with loop.
///
/// @since 0.0.14
/// @see {function} th-with
/// @type Map
/// @access private

$_th-core-with: () !default;

// th-with-breakpoint()
/// Use a breakpoint for a section of code.
///
/// @since 0.0.12
/// @content
///
/// @param {number} $breakpoint - A heading list breakpoint.
///
/// @example scss - Output a heading with a 768px breakpoint.
///   @include th-with-breakpoint(768px) {
///     @include th-heading(h1);
///   }

@mixin th-with-breakpoint(
  $breakpoint
){
  $cache: $_th-core-breakpoint-context;
  $_th-core-breakpoint-context: $breakpoint !global;
  @content;
  $_th-core-breakpoint-context: $cache !global;
}

// _th-heading-loop
/// Loops through a heading map and outputs @content with breakpoint context.
///
/// @since 0.0.14
/// @access private
/// @content
///
/// @param {type} $name
/// @param {list | string} $heading - A heading map key or list.

@mixin _th-heading-loop(
  $heading
){
  $heading-map: th-heading-get-map($heading);
  @if _th-heading-has-next($heading-map) {
    @each $heading-list in $heading-map {
      $breakpoint: _th-property-get($heading-list, breakpoint);
      @if $breakpoint {
        @include th-breakpoint($breakpoint, $breakpoint) {
          @content;
        }
      } @else {
        @content;
      }
    }
  } @else {
    @content;
  }
}

// _th-with-var-set()
/// Sets $_th-core-with global variable with contextual heading property values.
///
/// @since 0.0.14
/// @see th-with
/// @access private
///
/// @param {list | string} $heading - A heading map key or list.
/// @param {boolean} $convert [false] - If returned value should be unit converted.
/// @param {number} $base-font-size [$th-base-font-size] - Font size used for relative calculations.

@mixin _th-with-var-set(
  $heading,
  $convert: false,
  $base-font-size: $th-base-font-size
){
  $th-with-vars: ();
  $breakpoint: $_th-core-breakpoint-context;
  $heading: th-heading(
    $heading: $heading,
    $breakpoint: $breakpoint
  );
  $font-size: th-property-font-size(
    $heading: $heading,
    $base-font-size: $base-font-size,
    $convert: false
  );
  $th-with-vars: map-merge(
    $th-with-vars, (
      breakpoint: $breakpoint
    )
  );
  @each $property in $_th-core-properties {
    $base: th-if(font-size == $property, $base-font-size, $font-size);
    $th-with-vars: map-merge(
      $th-with-vars, (
        $property: th-property(
          $property-name: $property,
          $heading: $heading,
          $convert: $convert,
          $base-font-size: $base
        )
      )
    );
  }
  $_th-core-with: $th-with-vars !global;
}

// _th-with-var-reset()
/// Resets $th-with-vars global variable.
///
/// @since 0.0.14
/// @access private

@mixin _th-with-var-reset {
  $_th-core-with: false !global;
}

// th-with()
/// Loop through a headings breakpoints with access to it's
/// property values as a global variable. $th-font-size, $th-line-height,
/// $th-margin-top, $th-margin-bottom will become available to you within the
/// mixin.
///
/// @since 0.0.14
/// @see {function} th-with-get
/// @content [Styles for the contextual heading list]
///
/// @param {list | string} $heading - A heading map key or list.
/// @param {boolean} $convert [false] - If returned value should be unit converted.
/// @param {number} $base-font-size [$th-base-font-size] - Font size used for relative calculations.
///
/// @example scss - Output font-size, line-height, margin-top and margin-bottom properties individually for a heading.
///   @include th-with(h1) {
///     margin-top: th-with-get(margin-top);
///     margin-bottom: th-with-get(margin-bottom);
///     font-size: th-with-get(font-size);;
///     line-height: th-with-get(line-height);
///   }

@mixin th-with(
  $heading,
  $convert: false,
  $base-font-size: $th-base-font-size
){
  $loop: 1;
  $heading: th-heading-get-map($heading);
  @include _th-heading-loop($heading) {
    @include _th-with-var-set(
      $heading: nth($heading, $loop),
      $convert: $convert,
      $base-font-size: $base-font-size
    );
    @content;
    @include _th-with-var-reset;
    $loop: $loop + 1;
  }
}