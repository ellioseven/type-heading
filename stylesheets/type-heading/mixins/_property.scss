// Property
// 
// @group Mixins / Property
// @author Elliot Mitchum

// th-property-font-size
// Output heading font size styles.
//
// @since 0.0.10
// @type mixin
//
// @requires {function} th-property-font-size
// @requires {function} _th-core-global-breakpoint
//
// @param {string} $heading A heading map key (required).
// @param {number | boolean} $breakpoint (false) A heading list breakpoint.
// @param {boolean} $convert (true) If returned value should be unit converted.
// @param {number} $base-font-size ($th-base-font-size) Font size used for relative calculations.
//
// @example scss Output h1 font size styles.
// // @include th-property-font-size(h1)
// @example scss Output h1 font size styles with 768px breakpoint.
// // @include th-property-font-size(
// //   $heading: h1,
// //   $breakpoint: 768px
// // )

@mixin th-property-font-size(
	$heading,
	$breakpoint: false,
	$convert: true,
	$base-font-size: $th-base-font-size
){
  $breakpoint: _th-core-global-breakpoint($breakpoint);
	font-size: th-property-font-size(
		$heading: $heading,
		$breakpoint: $breakpoint,
		$convert: $convert,
		$base-font-size: $base-font-size
	);
}

// th-property-line-height
// Output heading line height styles.
//
// @since 0.0.10
// @type mixin
//
// @requires {function} th-property-line-height
//
// @param {string} $heading A heading map key (required).
// @param {number | boolean} $breakpoint (false) A heading list breakpoint.
// @param {boolean} $convert (true) If returned value should be unit converted.
// @param {number} $base-font-size ($th-base-font-size) Font size used for relative calculations.
//
// @example scss Output h1 line height styles.
// // @include th-property-line-height(h1)
// @example scss Output h1 line height styles with 768px breakpoint.
// // @include th-property-line-height(
// //   $heading: h1,
// //   $breakpoint: 768px
// // )

@mixin th-property-line-height(
	$heading,
	$breakpoint: false,
	$convert: true,
	$base-font-size: $th-base-font-size
){
  $breakpoint: _th-core-global-breakpoint($breakpoint);
	line-height: th-property-line-height(
		$heading: $heading,
		$breakpoint: $breakpoint,
		$convert: $convert,
		$base-font-size: $base-font-size
	);
}

// th-property-margin-top
// Output heading margin top styles.
//
// @since 0.0.10
// @type mixin
//
// @requires {function} th-property-margin-top
//
// @param {string} $heading A heading map key (required).
// @param {number | boolean} $breakpoint (false) A heading list breakpoint.
// @param {boolean} $convert (true) If returned value should be unit converted.
// @param {number} $base-font-size ($th-base-font-size) Font size used for relative calculations.
//
// @example scss Output h1 margin top styles.
// // @include th-property-margin-top(h1)
// @example scss Output h1 margin top styles with 768px breakpoint.
// // @include th-property-margin-top(
// //   $heading: h1,
// //   $breakpoint: 768px
// // )

@mixin th-property-margin-top(
	$heading,
	$breakpoint: false,
	$convert: true,
	$base-font-size: $th-base-font-size
){
  $breakpoint: _th-core-global-breakpoint($breakpoint);
	margin-top: th-property-margin-top(
		$heading: $heading,
		$breakpoint: $breakpoint,
		$convert: $convert,
		$base-font-size: $base-font-size
	);
}

// th-property-margin-bottom
// Output heading margin bottom styles.
//
// @since 0.0.10
// @type mixin
//
// @requires {function} th-property-margin-bottom
//
// @param {string} $heading A heading map key (required).
// @param {number | boolean} $breakpoint (false) A heading list breakpoint.
// @param {boolean} $convert (true) If returned value should be unit converted.
// @param {number} $base-font-size ($th-base-font-size) Font size used for relative calculations.
//
// @example scss Output h1 margin bottom styles.
// // @include th-property-margin-bottom(h1)
// @example scss Output h1 margin bottom styles with 768px breakpoint.
// // @include th-property-margin-bottom(
// //   $heading: h1,
// //   $breakpoint: 768px
// // )

@mixin th-property-margin-bottom(
	$heading,
	$breakpoint: false,
	$convert: true,
	$base-font-size: $th-base-font-size
){
  $breakpoint: _th-core-global-breakpoint($breakpoint);
	margin-bottom: th-property-margin-bottom(
		$heading: $heading,
		$breakpoint: $breakpoint,
		$convert: $convert,
		$base-font-size: $base-font-size
	);
}