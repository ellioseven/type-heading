////
/// Property
/// @group Property
////

//  th-property()
/// Output heading property style.
///
/// @since 0.0.14
///
/// @param {list | string} $heading - A heading map key or list.
/// @param {string} $property-name - (font-size | line-height | margin-top | margin-bottom | breakpoint) A heading property name.
/// @param {number} $breakpoint [false] - A heading list breakpoint.
/// @param {boolean | string} $convert [true] - (true | false | px | em | rem | rel | percent) If returned value should be unit converted or overridden.
/// @param {number} $base-font-size [$th-base-font-size] - Font size used for relative calculations.
///
/// @example scss - Output h1 font size styles.
///   @include th-property-font-size(h1)
/// @example scss - Output h1 font size styles with 768px breakpoint.
///   @include th-property-font-size(
///     $heading: h1,
///     $breakpoint: 768px
///   )
/// @example scss - Output h1 font size styles without unit conversion.
///   @include th-property(
///     $heading: h1,
///     $property-name: font-size,
///     $convert: false
///   )
/// @example scss - Output h1 font size styles and unit override to percent.
///   @include th-property(
///     $heading: h1,
///     $property-name: font-size,
///     $convert: percent
///   )
/// @example scss - Output h1 font size styles with a base font size of 24px.
///   @include th-property(
///     $heading: h1,
///     $property-name: font-size,
///     $base-font-size: 24px
///   )

@mixin th-property(
  $heading,
  $property-name,
  $breakpoint: false,
  $convert: true,
  $base-font-size: $th-base-font-size
){
  @if font-size != $property-name {
    $base-font-size: _th-property-base($heading, $breakpoint, $base-font-size);
  }
  @if th-list-has($_th-core-properties, $property-name) {
    $breakpoint: _th-core-breakpoint-context($breakpoint);
    #{$property-name}: th-property(
      $property-name: $property-name,
      $heading: $heading,
      $breakpoint: $breakpoint,
      $convert: $convert,
      $base-font-size: $base-font-size
    );
  }
}

//  th-property-font-size()
/// Output heading font size styles.
///
/// @since 0.0.10
///
/// @param {string} $heading - A heading map key.
/// @param {number | boolean} $breakpoint [false] - A heading list breakpoint.
/// @param {boolean | string} $convert [true] - (false | px | em | rem | rel | percent) - If returned value should be unit converted or overridden.
/// @param {number} $base-font-size [$th-base-font-size] - Font size used for relative calculations.
///
/// @example scss - Output h1 font size styles.
///   @include th-property-font-size(h1)
/// @example scss - Output h1 font size styles with 768px breakpoint.
///   @include th-property-font-size(
///     $heading: h1,
///     $breakpoint: 768px
///   )
/// @example scss - Output h1 font size styles without unit conversion.
///   @include th-property-font-size(
///     $heading: h1,
///     $convert: false
///   )
/// @example scss - Output h1 font size styles and unit override to percent.
///   @include th-property-font-size(
///     $heading: h1,
///     $convert: percent
///   )
/// @example scss - Output h1 font size with a base font size of 24px.
///   @include th-property-font-size(
///     $heading: h1,
///     $base-font-size: 24px
///   )

@mixin th-property-font-size(
  $heading,
  $breakpoint: false,
  $convert: true,
  $base-font-size: $th-base-font-size
){
  $heading: th-heading($heading, $breakpoint);
  @include th-property(
    $property-name: font-size,
    $heading: $heading,
    $breakpoint: $breakpoint,
    $convert: $convert,
    $base-font-size: $base-font-size
  );
}

//  th-property-line-height()
/// Output heading line height styles.
///
/// @since 0.0.10
///
/// @param {string} $heading - A heading map key.
/// @param {number | boolean} $breakpoint [false] - A heading list breakpoint.
/// @param {boolean | string} $convert [true] - (false | px | em | rem | rel | percent) If returned value should be unit converted or overridden.
/// @param {number} $base-font-size [$th-base-font-size] - Font size used for relative calculations.
///
/// @example scss - Output h1 line height styles.
///   @include th-property-line-height(h1)
/// @example scss - Output h1 line height styles with 768px breakpoint.
///   @include th-property-line-height(
///     $heading: h1,
///     $breakpoint: 768px
///   )
/// @example scss - Output h1 line height styles without unit conversion.
///   @include th-property-line-height(
///     $heading: h1,
///     $convert: false
///   )
/// @example scss - Output h1 line height styles and unit override to percent.
///   @include th-property-line-height(
///     $heading: h1,
///     $convert: percent
///   )
/// @example scss - Output h1 line height with a base font size of 24px.
///   @include th-property-line-height(
///     $heading: h1,
///     $base-font-size: 24px
///   )

@mixin th-property-line-height(
  $heading,
  $breakpoint: false,
  $convert: true,
  $base-font-size: $th-base-font-size
){
  $heading: th-heading($heading, $breakpoint);
  $base-font-size: _th-property-base($heading, $breakpoint, $base-font-size);
  @include th-property(
    $property-name: line-height,
    $heading: $heading,
    $breakpoint: $breakpoint,
    $convert: $convert,
    $base-font-size: $base-font-size
  );
}

//  th-property-margin-top()
/// Output heading margin top styles.
///
/// @since 0.0.10
///
/// @param {string} $heading - A heading map key.
/// @param {number | boolean} $breakpoint [false] - A heading list breakpoint.
/// @param {boolean | string} $convert [true] - (false | px | em | rem | rel | percent) If returned value should be unit converted or overridden.
/// @param {number} $base-font-size [$th-base-font-size] - Font size used for relative calculations.
///
/// @example scss - Output h1 margin top styles.
///   @include th-property-margin-top(h1)
/// @example scss - Output h1 margin top styles with 768px breakpoint.
///   @include th-property-margin-top(
///     $heading: h1,
///     $breakpoint: 768px
///   )
/// @example scss - Output h1 margin top styles without unit conversion.
///   @include th-property-margin-top(
///     $heading: h1,
///     $convert: false
///   )
/// @example scss - Output h1 margin top styles and unit override to percent.
///   @include th-property-margin-top(
///     $heading: h1,
///     $convert: percent
///   )
/// @example scss - Output h1 margin top with a base font size of 24px.
///   @include th-property-margin-top(
///     $heading: h1,
///     $base-font-size: 24px
///   )

@mixin th-property-margin-top(
  $heading,
  $breakpoint: false,
  $convert: true,
  $base-font-size: $th-base-font-size
){
  $heading: th-heading($heading, $breakpoint);
  $base-font-size: _th-property-base($heading, $breakpoint, $base-font-size);
  @include th-property(
    $property-name: margin-top,
    $heading: $heading,
    $breakpoint: $breakpoint,
    $convert: $convert,
    $base-font-size: $base-font-size
  );
}

//  th-property-margin-bottom()
/// Output heading margin bottom styles.
///
/// @since 0.0.10
///
/// @param {string} $heading - A heading map key.
/// @param {number | boolean} $breakpoint [false] - A heading list breakpoint.
/// @param {boolean | string} $convert [true] - (false | px | em | rem | rel | percent) If returned value should be unit converted or overridden.
/// @param {number} $base-font-size [$th-base-font-size] - Font size used for relative calculations.
///
/// @example scss - Output h1 margin bottom styles.
///   @include th-property-margin-bottom(h1)
/// @example scss - Output h1 margin bottom styles with 768px breakpoint.
///   @include th-property-margin-bottom(
///     $heading: h1,
///     $breakpoint: 768px
///   )
/// @example scss - Output h1 margin bottom styles without unit conversion.
///   @include th-property-margin-bottom(
///     $heading: h1,
///     $convert: false
///   )
/// @example scss - Output h1 margin bottom styles and unit override to percent.
///   @include th-property-margin-bottom(
///     $heading: h1,
///     $convert: percent
///   )
/// @example scss - Output h1 margin bottom with a base font size of 24px.
///   @include th-property-margin-bottom(
///     $heading: h1,
///     $base-font-size: 24px
///   )

@mixin th-property-margin-bottom(
  $heading,
  $breakpoint: false,
  $convert: true,
  $base-font-size: $th-base-font-size
){
  $heading: th-heading($heading, $breakpoint);
  $base-font-size: _th-property-base($heading, $breakpoint, $base-font-size);
  @include th-property(
    $property-name: margin-bottom,
    $heading: $heading,
    $breakpoint: $breakpoint,
    $convert: $convert,
    $base-font-size: $base-font-size
  );
}