////
/// Helpers
/// @group Helpers
/// @access private
////

// Logic
// ------------------------------

//  th-if()
/// Shorthand if else statement.
///
/// @since 0.0.14
/// @return {mixed} The return value of the condition.
///
/// @param {boolean} $condition - The condition to pass.
/// @param {mixed} $if-value - The return value if condition is true.
/// @param {mixed} $else-value - The return value if condition is false.
///
/// @example scss - If 2 plus 2 equals 8, return 10px, else return 20px.
///   th-if(2 + 2, 10px, 20px);
///   // 20px

@function th-if(
  $condition,
  $if-value,
  $else-value
){
  @if ($condition == true) {
    @return $if-value;
  } @else {
    @return $else-value;
  }
}

// Math
// ------------------------------

//  th-math-power()
/// Returns a powered number by exponent.
///
/// @since 0.0.11
/// @return {number} The powered number.
///
/// @param {number} $number - The base number.
/// @param {number} $exponent - The base number's exponent.
///
/// @example scss - Calculate 10 to the power of 3.
///   th-math-power(10, 3)
///   // 1000

@function th-math-power(
  $number,
  $exponent
){
  $_return: $number;
  @if $exponent > 1 {
    @for $i from 2 through $exponent {
      $_return: $_return * $number;
    }
  }
  @if $exponent < 1 {
    @for $i from 0 through -#{$exponent} {
      $_return: $_return / $number;
    }
  }
  @return $_return;
}

//  th-math-round-to()
/// Returns a floated number rounded to a decimal point.
///
/// @since 0.0.11
/// @return {number} The rounded number.
///
/// @param {number} $number - The number to round from.
/// @param {number} $decimal - The decimal place to round to.
///
/// @example scss - Round 1.234 to 2 decimal places.
///   th-math-round-to(1.234, 2)
///   // 1.23

@function th-math-round-to(
  $number,
  $decimal
){
  $_return: $number;
  $_return: round( $number * th-math-power(10, $decimal) );
  $_return: $_return / th-math-power(10, $decimal);
  @return $_return;
}

// Maps
// ------------------------------

//  th-map-set()
/// Set a map key with a new value.
///
/// @since 0.0.15
/// @return {map} Map with new property
///
/// @param {map} $map - The map/haystack of values.
/// @param {string} $key - The key/needle used to find value.
/// @param {$value} $value - The new value of the map key.
///
/// @example scss - Set map key 'foo' to 'Hello World'
///   th-map-set(
///     (
///       foo: 'First',
///       bar: 'Second'
///     ),
///     $key: foo,
///     $value: 'Hello Word'
///   )
///   // (
///   //   foo: 'Hello World',
///   //   bar: 'Second'
///   // )

@function th-map-set(
  $map,
  $key,
  $value
){
  $_return: ();
  @each $item in $map {
    @if nth($item, 1) != $key {
      $_return: map-merge($_return, (nth($item, 1): nth($item, 2)));
    }
  }
  $_return: map-merge($_return, ($key: $value));
  @return $_return;
}

// Lists
// ------------------------------

//  th-list-has-index()
/// Check list for a index.
///
/// @since 0.0.11
/// @return {boolean} If list contains index.
///
/// @param {list} $list - List to search.
/// @param {number} $index - The list index to retrieve.
///
/// @example scss - Check list for 2n index.
///   th-list-has-index((a, b, c), 2);
///   // true

@function th-list-has-index(
  $list,
  $index
){
	$_return: false;
  @if list == type-of($list) and length($list) >= $index {
    $_return: true;
  }
  @return $_return;
}

//  th-list-get-index-deep()
/// Return the index of a value within multiple lists.
///
/// @since 0.0.11
/// @return {list} The index of the found value.
///
/// @param {list} $list - The list to search through.
/// @param {number | string} $find - The value to find.
///
/// @example scss - Get the index of 'f' in (a, b, (c, d, (e, f))).
///   th-list-get-index-deep( (a, b, (c, d, (e, f))), f )
///   // 3 3 2

@function th-list-get-index-deep(
  $list,
  $find,
  $indexes: ()
){
  $_return: $find;
  $index: 0;
  @if th-list-has($list, $find) {
    @if length($indexes) > 0 {
      $_return: append($indexes, index($list, $find));
    } @else {
      $_return: index($list, $find);
    }
  } @else {
    @each $value in $list {
      $index: $index + 1;
      @if type-of($value) == list {
        $_return: th-list-get-index-deep($value, $find, append($indexes, $index));
      }
    }
  }
  @return $_return;
}

//  th-list-has()
/// Check list for a value.
///
/// @since 0.0.11
/// @return {boolean} If list contains value.
///
/// @param {list} $list - List to search.
/// @param {number | string} $find - Value to find.
///
/// @example scss - Check list for 'b'.
///   th-list-has((a b c), b);
///   // true

@function th-list-has(
  $list,
  $find
){
  $_return: false;
  @each $value in $list {
    @if $find == $value {
      @return true;
    }
  }
  @return $_return;
}

//  th-list-get-nth-deep()
/// Return a nested value by index (recursive).
///
/// @since 0.0.14
/// @return {mixed} The nested list value.
///
/// @param {list} $list - List to search through.
/// @param {list} $indexes - List of indexes to recurse.
///
/// @example scss - Get (3 3 2)n in (a, b, (c, d, (e, f))).
///   th-list-get-nth-deep(3 3 2)
///   // f

@function th-list-get-nth-deep(
  $list,
  $indexes
){
  $_return: false;
  @if list == type-of($list) {
    $_return: $list;
    @for $i from 1 through length($indexes) {
      @if th-list-has-index($_return, nth($indexes, $i)) {
        $_return: nth($_return, nth($indexes, $i));
      } @else if $i == 1 {
        $_return: false;
      }
    }
  } @else if $indexes == 1 {
    $_return: $list;
  }
  @return $_return;
}

//  th-list-has-deep()
/// Check list for a value (recursive).
///
/// @since 0.0.10
/// @return {boolean} If list contains value.
///
/// @param {list} $list - List to search.
/// @param {number | string} $find - Value to find.
///
/// @example scss - Check for 'f' in (a b (c d (e f))).
///   th-list-has-deep((a b (c d (e f))), f)
///   // true

@function th-list-has-deep(
  $list,
  $find
){
  $_return: false;
  @each $value in $list {
    @if list == type-of($value) {
      $_return: th-list-has-deep($value, $find);
    } @else {
      @if $find == $value {
        @return true;
      }
    }
  }
  @return $_return;
}

//  th-list-flatten()
/// Turns multidimensional `$list` into a one-level list.
///
/// @since 0.0.15
/// @link https://github.com/at-import/SassyLists/blob/master/stylesheets/SassyLists/_flatten.scss
/// @return {list} Flattened one-level list.
///
/// @param {list} $list - Multidimensional list to flatten
///
/// @example scss - Flatten multidimensional list.
///   th-list-flatten(a, b, (c, d))
///   // (a, b, c, d)

@function th-list-flatten($list) {
  $result: ();
  @each $item in $list {
    @if length($item) > 1 {
      $flatten: th-list-flatten($item);
      @each $i in $flatten {
        $result: append($result, $i, list-separator($list));
      }
    }
    @else {
      $result: append($result, $item, list-separator($list));
    }
  }
  @return $result;
}

// Units
// ------------------------------

//  th-unit-convert()
/// Coverts a number into another unit.
///
/// @since 0.0.14
/// @return {number} The converted number.
///
/// @param {string} $unit - (px|em|rem|rel|percent) A unit to convert the number to.
/// @param {number} $number - The number to convert.
/// @param {number} $base-font-size [$th-base-font-size] - Font size used for relative calculations.
///
/// @example scss - Convert 14px to em.
///   th-unit-convert($unit: em, $number: 14px)
///   // 0.875em
/// @example scss - Convert 14px with base font size of 20px to em.
///   th-unit-convert($unit: em, $number: 14px, $base-font-size: 20px)
///   // 0.700em

@function th-unit-convert(
  $unit,
  $number,
  $base-font-size: $th-base-font-size
){
  $function: sut-unit-#{$unit};
  // REM requires root base font size.
  @if ($unit == rem) { $base-font-size: $th-base-font-size }
  @if function-exists($function) and unit($number) != $unit {
    @return call(get-function($function), $number, $base-font-size);
  } @else {
    @return $number;
  }
}
