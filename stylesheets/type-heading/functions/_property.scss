// Property
// 
// @group Functions / Property
// @author Elliot Mitchum

// th-properties
// An ordered list of available properties.
//
// @since 0.0.10
// @type List
// @access private

$th-properties: (
  font-size,
  line-height,
  (margin-top margin-bottom),
  breakpoint
);

// th-property
// Return heading list property value.
//
// @since 0.0.10
// @type function
//
// @requires {function} th-heading
// @requires {function} th-property-get
// @requires {function} th-property-default
// @requires {function} _th-property-unit-convert-property
// @requires {function} _th-core-breakpoint-context
//
// @param {list | string} $heading A heading map key or list (required).
// @param {string} $property-name (font-size | line-height | margin-top | margin-bottom | breakpoint) A heading property name (required).
// @param {number} $breakpoint A heading list breakpoint.
// @param {boolean|string} $convert (true|false|px|em|rem|rel|percent) If returned value should be unit converted or overridden.
// @param {number} $base-font-size ($th-base-font-size) Font size used for relative calculations.
//
// @returns {number} Heading property value.
//
// @example scss Return font size from a h1 heading map.
// // th-property(
// //   $heading: h1,
// //   $property-name: font-size
// // )
// @example scss Return font size from a h1 heading map with a breakpoint of 768px.
// // th-property(
// //   $heading: h1,
// //   $property-name: font-size,
// //   $breakpoint: 768px
// // )
// @example scss Return font size from a h1 heading map without unit conversion.
// // th-property(
// //   $heading: h1,
// //   $property-name: font-size,
// //   $convert: false
// // )
// @example scss Return font size from a h1 heading map and unit override to percent.
// // th-property(
// //   $heading: h1,
// //   $property-name: font-size,
// //   $convert: percent
// // )
// @example scss Return font size from a h1 with a base font size of 24px.
// // th-property(
// //   $heading: h1,
// //   $property-name: font-size,
// //   $base-font-size: 24px
// // )

@function th-property(
  $heading,
  $property-name,
  $breakpoint: false,
  $convert: true,
  $base-font-size: $th-base-font-size
){
  $heading: th-heading($heading, $breakpoint);
  $breakpoint: _th-core-breakpoint-context($breakpoint);
  $property: _th-property-get($heading, $property-name);
  @if $property-name != font-size {
    $base-font-size: _th-property-base($heading, $breakpoint, $base-font-size);
  }
  @if $property == default or $property == false {
    $property: th-property-default($property-name, $base-font-size, false);
  }
  @if string == type-of($convert) {
    $property: th-unit-convert($convert, $property, $base-font-size);
  } @elseif $convert == true {
    $property: _th-property-unit-convert-property($property-name, $property, $base-font-size);
  }
  @return $property;
}

// _th-property-get
// Return heading list property value.
//
// @since 0.0.11
// @type function
// @access private
//
// @requires {function} th-list-get-index-deep
// @requires {function} th-list-has-index
//
// @param {list} $heading A heading list (required).
// @param {string} $property-name (font-size | line-height | margin-top | margin-bottom | breakpoint) A heading property name (required).
//
// @returns {number} The heading property value.
//
// @example scss Return font size from a heading.
// // _th-property-get(h1, font-size)

@function _th-property-get(
  $heading,
  $property-name
  ){
  $_return: false;
  $property-indexes: th-list-get-index-deep($th-properties, $property-name);
  @if list == type-of($heading) {
    $_return: $heading;
    @for $i from 1 through length($property-indexes) {
      @if th-list-has-index($_return, nth($property-indexes, $i)) {
        $_return: nth($_return, nth($property-indexes, $i));
      } @else if $i == 1 {
        $_return: false;
      }
    }
  } @else if $property-indexes == 1 {
    $_return: $heading;
  }
  @return $_return;
}

// th-property-font-size
// Return heading font size value.
//
// @since 0.0.10
// @type function
//
// @requires th-property
//
// @param {list | string} $heading A heading map key or list (required).
// @param {number | boolean} $breakpoint A heading list breakpoint.
// @param {boolean|string} $convert (true|false|px|em|rem|rel|percent) If returned value should be unit converted or overridden.
// @param {number} $base-font-size ($th-base-font-size) Font size used for relative calculations.
//
// @returns {number} The heading font size value.
//
// @example scss Return font size from a h1 heading map.
// // th-property-font-size(h1)
// @example scss Return font size from a h1 heading map with a breakpoint of 768px.
// // th-property-font-size(
// //   $heading: h1,
// //   $breakpoint: 768px
// // )
// @example scss Return font size from a h1 heading map without unit conversion.
// // th-property-font-size(
// //   $heading: h1,
// //   $convert: false
// // )
// @example scss Return font size from a h1 heading map and unit override to percent.
// // th-property-font-size(
// //   $heading: h1,
// //   $convert: percent
// // )
// @example scss Return font size from a h1 with a base font size of 24px.
// // th-property-font-size(
// //   $heading: h1,
// //   $base-font-size: 24px
// // )

@function th-property-font-size(
  $heading,
  $breakpoint: false,
  $convert: true,
  $base-font-size: $th-base-font-size
){
  @return th-property(
    $heading: $heading,
    $property-name: font-size,
    $breakpoint: $breakpoint,
    $convert: $convert,
    $base-font-size: $base-font-size
  );
}

// th-property-line-height
// Return heading line height value.
//
// @since 0.0.10
// @type function
//
// @requires th-property
//
// @param {list | string} $heading A heading map key or list (required).
// @param {number} $breakpoint A heading list breakpoint.
// @param {boolean|string} $convert (true|false|px|em|rem|rel|percent) If returned value should be unit converted or overridden.
// @param {number} $base-font-size ($th-base-font-size) Font size used for relative calculations.
//
// @returns {number} The heading line height value.
//
// @example scss Return line height from a h1 heading map.
// // th-property-line-height(h1)
// @example scss Return line height from a h1 heading map with a breakpoint of 768px.
// // th-property-line-height(
// //   $heading: h1,
// //   $breakpoint: 768px
// // )
// @example scss Return line height from a h1 heading map without unit conversion.
// // th-property-line-height(
// //   $heading: h1,
// //   $convert: false
// // )
// @example scss Return line height from a h1 heading map and unit override to percent.
// // th-property-line-height(
// //   $heading: h1,
// //   $convert: percent
// // )
// @example scss Return line height from a h1 with a base font size of 24px.
// // th-property-line-height(
// //   $heading: h1,
// //   $base-font-size: 24px
// // )

@function th-property-line-height(
  $heading,
  $breakpoint: false,
  $base-font-size: th-property-font-size($heading, $breakpoint, false),
  $convert: true
){
  @return th-property(
    $heading: $heading,
    $property-name: line-height,
    $breakpoint: $breakpoint,
    $convert: $convert,
    $base-font-size: _th-property-base($heading, $breakpoint, $base-font-size)
  );
}

// th-property-margin-top
// Return heading margin top value.
//
// @since 0.0.10
// @type function
//
// @requires th-property
//
// @param {list | string} $heading A heading map key or list (required).
// @param {number | boolean} $breakpoint (false) A heading list breakpoint.
// @param {boolean|string} $convert (true|false|px|em|rem|rel|percent) If returned value should be unit converted or overridden.
// @param {number} $base-font-size ($th-base-font-size) Font size used for relative calculations.
//
// @returns {number} The heading margin top value.
//
// @example scss Return margin top from a h1 heading map.
// // th-property-margin-top(h1)
// @example scss Return margin top from a h1 heading map with a breakpoint of 768px.
// // th-property-margin-top(
// //   $heading: h1,
// //   $breakpoint: 768px
// // )
// @example scss Return margin top from a h1 heading map without unit conversion.
// // th-property-margin-top(
// //   $heading: h1,
// //   $convert: false
// // )
// @example scss Return margin top from a h1 heading map and unit override to percent.
// // th-property-margin-top(
// //   $heading: h1,
// //   $convert: percent
// // )
// @example scss Return margin top from a h1 with a base font size of 24px.
// // th-property-margin-top(
// //   $heading: h1,
// //   $base-font-size: 24px
// // )

@function th-property-margin-top(
  $heading,
  $breakpoint: false,
  $base-font-size: th-property-font-size($heading, $breakpoint, false),
  $convert: true
){
  @return th-property(
    $heading: $heading,
    $property-name: margin-top,
    $breakpoint: $breakpoint,
    $convert: $convert,
    $base-font-size: _th-property-base($heading, $breakpoint, $base-font-size)
  );
}

// th-property-margin-bottom
// Return heading margin bottom value.
//
// @since 0.0.10
// @type function
//
// @requires th-property
//
// @param {list | string} $heading A heading map key or list (required).
// @param {number | boolean} $breakpoint (false) A heading list breakpoint.
// @param {boolean|string} $convert (true|false|px|em|rem|rel|percent) If returned value should be unit converted or overridden.
// @param {number} $base-font-size ($th-base-font-size) Font size used for relative calculations.
//
// @returns {number} The heading margin bottom value.
//
// @example scss Return margin bottom from a h1 heading map.
// // th-property-margin-bottom(h1)
// @example scss Return margin bottom from a h1 heading map with a breakpoint of 768px.
// // th-property-margin-bottom(
// //   $heading: h1,
// //   $breakpoint: 768px
// // )
// @example scss Return margin bottom from a h1 heading map without unit conversion.
// // th-property-margin-bottom(
// //   $heading: h1,
// //   $convert: false
// // )
// @example scss Return margin bottom from a h1 heading map and unit override to percent.
// // th-property-margin-bottom(
// //   $heading: h1,
// //   $convert: percent
// // )
// @example scss Return margin bottom from a h1 with a base font size of 24px.
// // th-property-margin-bottom(
// //   $heading: h1,
// //   $base-font-size: 24px
// // )

@function th-property-margin-bottom(
  $heading,
  $breakpoint: false,
  $base-font-size: $th-base-font-size,
  $convert: true
){
  @return th-property(
    $heading: $heading,
    $property-name: margin-bottom,
    $breakpoint: $breakpoint,
    $convert: $convert,
    $base-font-size: _th-property-base($heading, $breakpoint, $base-font-size)
  );
}

// th-property-default
// Return default property value.
//
// @since 0.0.10
// @type function
//
// @requires _th-property-unit-convert-property
//
// @param {string} $property-name (font-size | line-height | margin-top | margin-bottom | breakpoint) A property name (required).
// @param {boolean|string} $convert (true|false|px|em|rem|rel|percent) If returned value should be unit converted or overridden.
// @param {number} $base-font-size ($th-base-font-size) Font size used for relative calculations.
//
// @returns {number} The default property value.
//
// @example scss Get default font size.
// // th-property-default(font-size)

@function th-property-default(
  $property-name,
  $convert: true,
  $base-font-size: $th-base-font-size
){
  $property: map-get($th-property-defaults, $property-name);
  @if $convert == true {
    $property: _th-property-unit-convert-property($property-name, $property, $base-font-size);
  }
  @return $property;
}

// _th-property-unit-convert-property
// Returns a property's converted unit value by property name.
//
// @since 0.0.11
// @type function
// @access private
//
// @requires _th-property-unit-convert-property
//
// @param {string} $property-name (font-size | line-height | margin-top | margin-bottom | breakpoint) A property name (required).
// @param {number} $property-value The number value of the property (required).
// @param {number} $base-font-size ($th-base-font-size) Font size used for relative calculations.
//
// @returns {number} The converted unit value.
//
// @example scss Convert heading font size of 14px.
// // _th-property-unit-convert-property(
// //   $property-name: font-size,
// //   $property-value: 14px
// // )
// @example scss Convert heading font size of 14px with base font size of 20px.
// // _th-property-unit-convert-property(
// //   $property-name: font-size,
// //   $property-value: 14px,
// //   $base-font-size: 20px
// // )

@function _th-property-unit-convert-property(
  $property-name,
  $property-value,
  $base-font-size: $th-base-font-size
){
  $unit: map-get($th-property-units, $property-name);
  @return th-unit-convert($unit, $property-value, $base-font-size);
}

@function _th-property-base(
  $heading,
  $breakpoint,
  $base-font-size
) {
  $_return: $base-font-size;
  @if $base-font-size == $th-base-font-size {
    $_return: th-property-font-size($heading, $breakpoint, false);
  }
  @return $_return;
}